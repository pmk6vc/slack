# Inject env vars at runtime by entering 'docker-compose up [--detach] [--force-recreate] [--renew-anon-volumes]'
services:
  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:13.0.3"
    ports: [ "${COORDINATOR_EXTERNAL_PORT:-5432}:5432" ]
    labels: [ "com.citusdata.role=Master" ]
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
  worker:
    image: "citusdata/citus:13.0.3"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [ master ]
    environment: *AUTH
volumes:
  healthcheck-volume:



#  postgres-db:
#    image: "postgres:18-alpine"
#    container_name: pgdb
#    ports:
#      - 5432:${POSTGRES_PORT}
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#  citus_master:
#    image: "citusdata/citus:13.0.3"
#    ports: [ "${POSTGRES_PORT}:5432" ]
#    labels: [ "com.citusdata.role=Master" ]
#    environment: &AUTH
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      PGUSER: ${POSTGRES_USER}
#      PGPASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust}
#  citus_worker:
#    image: "citusdata/citus:13.0.3"
#    labels: [ "com.citusdata.role=Worker" ]
#    depends_on: [ citus_manager ]
#    environment: *AUTH
#    command: "/wait-for-manager.sh"
#  citus_manager:
#    image: "citusdata/membership-manager:0.3.0"
#    volumes:
#      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
#    depends_on: [ citus_master ]
#    environment: *AUTH
